generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  budgets         Budget[]
  calendarEvents  CalendarEvent[]
  emiPayments     EMIPayment[]
  fds             FD[]
  featureRequests FeatureRequest[]
  fundAdditions   FundAddition[]
  goals           Goal[]
  gold            Gold[]
  loans           Loan[]
  mutualFunds     MutualFund[]
  transactions    Transaction[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  balance      Float
  createdAt    DateTime      @default(now())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fds          FD[]
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model FD {
  id        String   @id @default(uuid())
  amount    Float
  rate      Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  accountId String
  userId    String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("fds")
}

model Gold {
  id     String   @id @default(uuid())
  grams  Float
  value  Float
  date   DateTime @default(now())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("gold")
}

model Transaction {
  id        String   @id @default(uuid())
  type      String
  amount    Float
  category  String
  note      String?
  date      DateTime @default(now())
  accountId String
  userId    String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id        String    @id @default(uuid())
  category  String
  limit     Float
  period    String    @default("monthly")
  startDate DateTime  @default(now())
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, period])
  @@index([userId])
  @@index([category])
  @@map("budgets")
}

model Goal {
  id            String         @id @default(uuid())
  title         String
  targetAmount  Float
  targetDate    DateTime?
  category      String
  description   String?
  isCompleted   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  fundAdditions FundAddition[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("goals")
}

model FundAddition {
  id        String   @id @default(uuid())
  amount    Float
  note      String?
  date      DateTime @default(now())
  goalId    String
  userId    String
  createdAt DateTime @default(now())
  goal      Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([goalId])
  @@map("fund_additions")
}

model MutualFund {
  id             String    @id @default(uuid())
  schemeCode     Int
  schemeName     String
  fundHouse      String
  schemeType     String
  schemeCategory String
  units          Float
  avgPrice       Float
  totalInvested  Float
  purchaseDate   DateTime  @default(now())
  currentNAV     Float?
  lastUpdated    DateTime  @default(now())
  isActive       Boolean   @default(true)
  notes          String?
  investmentType String    @default("lumpsum")
  tags           String    @default("[]")
  sipAmount      Float?
  sipDate        Int?
  sipStartDate   DateTime?
  sipEndDate     DateTime?
  sipFrequency   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([schemeCode])
  @@map("mutual_funds")
}

model CalendarEvent {
  id              String   @id @default(uuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  allDay          Boolean  @default(false)
  priority        String   @default("medium")
  category        String   @default("general")
  status          String   @default("pending")
  accountId       String?
  fdId            String?
  mutualFundId    String?
  goldId          String?
  reminderEnabled Boolean  @default(true)
  reminderTime    Int      @default(15)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate])
  @@index([category])
  @@map("calendar_events")
}

model Loan {
  id                String       @id @default(uuid())
  loanName          String
  loanType          String
  principalAmount   Float
  interestRate      Float
  tenureMonths      Int
  emiAmount         Float
  lender            String
  loanAccountNumber String?
  startDate         DateTime
  endDate           DateTime
  currentBalance    Float
  totalPaidAmount   Float        @default(0)
  totalInterestPaid Float        @default(0)
  remainingEmis     Int
  processingFee     Float?
  insurance         Float?
  prepaymentCharges Float?
  isActive          Boolean      @default(true)
  description       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String
  emiPayments       EMIPayment[]
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loanType])
  @@index([isActive])
  @@map("loans")
}

model EMIPayment {
  id               String    @id @default(uuid())
  loanId           String
  emiNumber        Int
  dueDate          DateTime
  paidDate         DateTime?
  emiAmount        Float
  principalAmount  Float
  interestAmount   Float
  amountPaid       Float?
  paymentMode      String?
  transactionId    String?
  status           String    @default("pending")
  lateFee          Float?
  prepaymentAmount Float?
  description      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  loan             Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([loanId, emiNumber])
  @@index([userId])
  @@index([loanId])
  @@index([status])
  @@index([dueDate])
  @@map("emi_payments")
}

model FeatureRequest {
  id                String   @id @default(uuid())
  title             String
  description       String
  category          String
  priority          String   @default("medium")
  useCases          String?
  alternatives      String?
  submitterName     String?
  submitterEmail    String?
  status            String   @default("submitted")
  adminNotes        String?
  estimatedTimeline String?
  votes             Int      @default(0)
  isPublic          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([isPublic])
  @@map("feature_requests")
}
